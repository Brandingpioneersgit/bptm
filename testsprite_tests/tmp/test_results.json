[
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "babd9ba2-1fb1-488b-9f66-3e81d89bc159",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC001-Successful Login with Valid Credentials",
    "description": "Verify that a user can log in successfully using a valid phone number and password through the unified authentication system.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Enter a valid phone number and corresponding password.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('+919876543210')\n        \n\n        # Click on the login button to attempt login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login attempt with valid phone number and password failed due to an unexpected authentication error. User was not authenticated and not redirected to any dashboard. Session initiation and role-based access control could not be verified due to failure in authentication.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994866136512//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.124Z",
    "modified": "2025-09-04T14:07:46.273Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "cbf0af02-2083-4e03-afe9-ab6a8fbe58ce",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC002-Login Failure with Invalid Credentials",
    "description": "Verify that login fails when invalid phone number or password is provided and appropriate error messages appear.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Enter invalid phone number and incorrect password, then click Sign In button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1234567890')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter another invalid phone number or password and attempt login again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('InvalidUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0000000000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assertion: Confirm that login is rejected by checking for error message visibility.\n        error_locator = frame.locator('text=An unexpected error occurred during authentication')\n        assert await error_locator.is_visible(), 'Error message for invalid credentials should be visible after failed login attempt'\n        \n        # Assertion: Ensure no session is created after failed login attempt by checking that dashboard elements are not present.\n        dashboard_title_locator = frame.locator('text=BP Agency Dashboard')\n        assert not await dashboard_title_locator.is_visible(), 'Dashboard should not be visible after failed login attempt'\n        \n        # Additional check: Confirm that welcome message is not shown after failed login.\n        welcome_message_locator = frame.locator('text=Welcome Back')\n        assert not await welcome_message_locator.is_visible(), 'Welcome message should not be visible after failed login attempt'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994916962835//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.131Z",
    "modified": "2025-09-04T14:08:37.138Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "1a4a0076-15bd-437e-9604-e4926ac3b308",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC003-Role-based Access Control Enforcement",
    "description": "Verify that after login, users only have access to functionalities and dashboard views specific to their assigned role.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input first name and phone number for Employee role and click Sign In.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Employee')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify credentials format or try alternative valid credentials for Employee role login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1234567890')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with role-based access testing due to repeated authentication errors for Employee role. Please provide valid credentials for Employee and Admin roles to continue testing.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994909378866//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.139Z",
    "modified": "2025-09-04T14:08:29.513Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "866f61c1-2440-401e-bd55-cc9815049e84",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC004-Employee KPI Tracking and Performance Leaderboard Accuracy",
    "description": "Validate that employees’ KPIs are tracked correctly, performance data is updated in real-time, and leaderboard rankings reflect accurate calculations monthly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input first name and phone number, then click Sign In to log in as an employee.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to authentication error preventing login. Reported issue for resolution before resuming KPI validation.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994888333951//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.146Z",
    "modified": "2025-09-04T14:08:08.577Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "0e2a3661-cfd2-40fa-a977-613f0b816f9e",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC005-Comprehensive Client Management CRUD Operations",
    "description": "Ensure client information can be created, viewed, updated, and deleted through the client management modules without errors.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input first name and phone number, then click Sign In button to log in as manager or admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Manager')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to authentication error preventing login as manager or admin. Cannot proceed with client management module tests until this issue is resolved.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994884122554//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.153Z",
    "modified": "2025-09-04T14:08:04.266Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "589fe23c-1855-4d97-8aec-25b99fc05e29",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC006-Employee Management Including Onboarding and Performance Reviews",
    "description": "Validate the employee onboarding process, directory updates, and performance review entries function correctly with proper validations.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input admin first name and phone number, then click Sign In button to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Admin')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify if there is any help or contact option to resolve authentication issue or try alternative login credentials or methods.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Authentication error on login page prevents proceeding with employee onboarding, directory updates, and performance review testing. Issue reported for resolution. Task stopped as per instruction.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994894982797//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.159Z",
    "modified": "2025-09-04T14:08:15.168Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "2b9ec231-1a1e-429d-933e-30a53e2bce59",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC007-SEO Module Data Entry and Reporting Functionality",
    "description": "Test that SEO team members can enter SEO data accurately, generate reports, and appraisals are calculated and displayed correctly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input first name and phone number for SEO team member and click Sign In button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('SEOUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login attempt as SEO team member failed due to authentication error. Cannot proceed with testing SEO data entry, report generation, or appraisal calculations without successful login. Please verify credentials or system authentication setup.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994871080859//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.165Z",
    "modified": "2025-09-04T14:07:51.253Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "13e242c6-6893-4c20-84dd-9049da997d1c",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC008-Reporting System Generates Accurate Monthly and Growth Reports",
    "description": "Validate that monthly, growth, and department-specific reports are generated correctly with accurate analytics data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input first name and phone number, then click Sign In to log in as a manager or admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ManagerName')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to authentication error preventing login as manager. Reported issue for resolution before continuing with report generation and analytics validation tests.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994886846624//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.170Z",
    "modified": "2025-09-04T14:08:07.021Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "b73a3bec-33b5-4488-9050-e719cbab3400",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC009-Arcade Gamification Point Earning and Redemption",
    "description": "Verify that users can earn and redeem points correctly within the arcade system, and admins can manage point controls effectively.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input employee first name and phone number, then click Sign In to log in as an employee.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try alternative valid employee credentials or check for any help or contact options for login assistance.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Sarah')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1234567890')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to find alternative login methods, check for admin login or contact system administrator as suggested on the page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminpass')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Authentication attempts for both employee and admin roles failed repeatedly due to an unexpected error during authentication. Without successful login, it is impossible to test earning and redeeming points or admin management of point controls. Please resolve the authentication issue before retrying. Task stopped.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994954451598//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.176Z",
    "modified": "2025-09-04T14:09:14.607Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "25c70f72-40aa-4ca1-8f7b-c45e539a357b",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC010-Session Management and Logout Functionality",
    "description": "Validate that user sessions are accurately managed and users can effectively log out, clearing session data securely.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input valid user credentials and click Sign In to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to authentication failure on login. Cannot validate session management or logout functionality without successful login. Issue reported for developer investigation.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994890400081//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.182Z",
    "modified": "2025-09-04T14:08:10.591Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "d058d4ec-5313-45f6-836e-cec324acffb4",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC011-Frontend Responsiveness Across Supported Devices",
    "description": "Verify that the dashboard UI components render correctly and user interactions function seamlessly on various screen sizes and device types.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Fill in the login form with valid credentials and submit to access the dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('+919876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to authentication failure preventing dashboard access. Authentication error reported for resolution.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994891758258//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.197Z",
    "modified": "2025-09-04T14:08:11.918Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "29bd5ccc-d5cc-4bf2-9e1d-4991a939e742",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC012-Error Handling on Invalid Form Submissions",
    "description": "Verify that all forms in the system provide proper validation feedback and handle erroneous or incomplete inputs gracefully.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Attempt to submit the login form with missing mandatory fields to check validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to client onboarding form to test validation with missing mandatory fields.\n        await page.goto('http://localhost:5173/client-onboarding', timeout=10000)\n        \n\n        # Attempt to submit the client onboarding form with missing mandatory fields by clicking the 'Complete Onboarding' button without filling required fields.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/form/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill client onboarding form fields with invalid data formats (e.g., invalid phone number, invalid email) and attempt to submit to check format validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/section/div/div/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('invalid-phone')\n        \n\n        # Click 'Refresh Page' button to reload the client onboarding form and continue testing validation on other forms.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to submit employee onboarding form with missing mandatory fields to check validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/form/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input invalid phone number and invalid email format into employee onboarding form fields and attempt to submit to check for format validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/section/div/div/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('123abc4567')\n        \n\n        # Click 'Refresh Page' button to reload the client onboarding form and then navigate to employee onboarding form to continue validation testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input invalid phone number and invalid email format into employee onboarding form fields and attempt to submit to check for format validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/section/div/div/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('123abc4567')\n        \n\n        # Click 'Refresh Page' button to reload the client onboarding form and then navigate to employee onboarding form to continue validation testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to submit employee onboarding form with extremely large inputs or boundary values to check system handling and validation feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div[2]/div/section/div/div/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1234567890123456789012345678901234567890')\n        \n\n        # Click 'Refresh Page' button to reload the client onboarding form and report the critical validation handling issue.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that required field error messages are displayed after submitting forms with missing mandatory fields.\n        required_error_msgs = await frame.locator('text=This field is required').all_text_contents()\n        assert len(required_error_msgs) > 0, 'Required field error messages not displayed as expected.'\n        # Assert that format validation errors are shown for invalid phone number and email inputs.\n        phone_error = await frame.locator('text=Invalid phone number').is_visible()\n        email_error = await frame.locator('text=Invalid email').is_visible()\n        assert phone_error or email_error, 'Format validation errors for phone or email not displayed.'\n        # Assert that system handles extremely large inputs gracefully and displays appropriate messages or truncates input.\n        large_input_warning = await frame.locator('text=Input too long').is_visible()\n        assert large_input_warning, 'No warning or handling for extremely large inputs displayed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756995306786309//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.242Z",
    "modified": "2025-09-04T14:15:07.024Z"
  },
  {
    "projectId": "760b179e-b1cb-4168-afe1-5aa3b5868081",
    "testId": "6bd892a4-219a-4cec-8b08-fc5fb3a9574c",
    "userId": "64789468-0061-70f5-8fc0-f9d6c509a178",
    "title": "TC013-Access Control for Protected API Services",
    "description": "Verify that API services related to authentication, scoring, SEO, and attendance enforce role-based access control and handle unauthorized requests properly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Attempt to sign in without authentication token by submitting empty or invalid credentials to check unauthorized error.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to sign in with user credentials having limited roles to test role-based access control.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('limitedUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('9876543210')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to login with correct role-based authorization credentials to verify permitted actions succeed.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminUser')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1234567890')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to persistent authentication errors preventing verification of role-based access control and API authorization. Issue reported for resolution.\nBrowser Console Logs:\n[WARNING] Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key. (at http://localhost:5173/node_modules/.vite/deps/@supabase_supabase-js.js?v=ee6a8837:5444:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)\n[ERROR] Pattern attribute value ^(\\\\+91[-\\\\s]?)?[0-9]{10}$ is not a valid regular expression: Uncaught SyntaxError: Invalid regular expression: /^(\\\\+91[-\\\\s]?)?[0-9]{10}$/v: Invalid character in character class (at http://localhost:5173/:0:0)\n[ERROR] ❌ API: Authentication error: ReferenceError: users is not defined\n    at authenticateUser (http://localhost:5173/src/api/authApi.js?t=1756993802271:71:5)\n    at async http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:94:26\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/api/authApi.js?t=1756993802271:189:12)\n[ERROR] ❌ Login failed: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:129:14)\n[ERROR] Login submission error: Error: An unexpected error occurred during authentication\n    at http://localhost:5173/src/features/auth/UnifiedAuthContext.jsx?t=1756993802271:96:15\n    at async handleSubmit (http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:70:22) (at http://localhost:5173/src/features/auth/LoginPage.jsx?t=1756993802271:77:14)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64789468-0061-70f5-8fc0-f9d6c509a178/1756994969619633//tmp/test_task/result.webm",
    "created": "2025-09-04T14:06:06.340Z",
    "modified": "2025-09-04T14:09:29.780Z"
  }
]
